========== [ Модели ] ==========

News: - новость
[
    id: int - id
    status: int - статус (0 - черновик, 1 - опубликована)
    title: string - заголовок
    text: string - текст
    date: string - дата публикации в формате yyyy-MM-DD HH:mm:ss
    user_id: int - id автора
    is_deleted: int - удалена ли новость
    <categories>: NewsCategory[] - список привязанных категорий
]

NewsCategory: - категория новости
[
    id: int - id
    title: string - название
    user_id: int - id автора
    is_deleted: int - удалена ли категория
]

Course: - курс
[
    id: int - id
    title: string - название
    description: string - описание
    is_open: int - все ли главы доступны сразу
    status: int - статус (0 - черновик, 1 - опубликована)
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удален ли курс
    <chapters>: Chapter - список глав
]

Chapter: - глава
[
    id: int - id
    course_id: int - id курса
    title: string - название
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удалена ли глава
    <themes>: Theme - список тем
]

Theme: - тема
[
    id: int - id
    chapter_id: int - id главы
    title: string - название
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удалена ли тема
    <lessons>: Lesson - список уроков
]

Lesson: - урок
[
    id: int - id
    theme_id: int - id темы
    title: string - название
    description: string - описание
    description_autosave: string - автосохраненное описание
    status: int - статус (0 - черновик, 1 - опубликована)
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удален ли урок
]





========== [ URL'ы ] ==========

---------- [ Новости ] ----------

/api/news [GET]
Возвращает новости с категориями и постраничной разбивкой. Админы видят даже удаленные новости.
Request: [
    <page>: int - страница
    <category>: int - категория новостей
]
Response: [
    data: News[] - список новостей
    count: int - количество новостей
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/news/<id> [GET]
Возвращает данные об одной новости с id = <id>. Если новость не найдена, возвращает 404.
[
    data: News - данные о новости
    result: bool - успешно ли получены данные
]

/api/news/create [POST]
Создать новость.
Request: [
    title: string - заголовок новости
    text: string - текст новости
    <NewsCategory>: [[<title|id>: <string|int>]] - категории новостей. Для каждой категории надо указать либо title новой категории, либо id уже существующей.
]
Response: [
    data: News - данные о созданной новости
    result: bool - успешно ли создана новость
]

/api/news/update [POST]
Редактировать новость. Уже привязанные категории будут отвязаны, поэтому NewsCategory надо передавать при каждом запросе.
Request: [
    <title>: string - заголовок новости
    <text>: string - текст новости
    <status>: int - статус новости
    <date>: string - дата публикации новости
    <NewsCategory>: [[<title|id>: <string|int>]] - категории новостей. Для каждой категории надо указать либо title новой категории, либо id уже существующей.
]
Response: [
    data: News - данные о созданной новости
    result: bool - успешно ли создана новость
]

/api/news/delete [POST]
Удалить новость.
Request: [
    id: int - id новости
]
Response: [
    result: bool - успешно ли удалена новость
]

/api/news/restore [POST]
Восстановить новость.
Request: [
    id: int - id новости
]
Response: [
    result: bool - успешно ли восстановлена новость
]



---------- [ Категории новостей ] ----------

/api/news-category [GET]
Получить список категорий новостей. Админы видят даже удаленные категории.
Request: [
    <page>: int - страница, обычно не важна: на страницу приходится 10000 категорий
]
Response: [
    data: NewsCategory[] - список категорий новостей
    count: int - количество категорий новостей
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/news-category/create [POST]
Создать категорию новостей.
Request: [
    title: string - название категории
]
Response: [
    data: NewsCategory - данные о созданной категории
    result: bool - успешно ли создана категория
]

/api/news-category/update [POST]
Редактировать категорию новостей.
Request: [
    title: string - название категории
]
Response: [
    data: NewsCategory - данные о категории
    result: bool - успешно ли отредактирована категория
]

/api/news-category/delete [POST]
Удалить категорию новостей.
Request: [
    id: int - id категории
]
Response: [
    result: bool - успешно ли удалена категория
]

/api/news-category/restore [POST]
Восстановить категорию новостей.
Request: [
    id: int - id категории
]
Response: [
    result: bool - успешно ли восстановлена категория
]



---------- [ Курсы ] ----------

/api/course [GET]
Получить список курсов. Админы видят даже удаленные курсы.
Request: [
    <page>: int - страница
]
Response: [
    data: Course[] - список курсов
    count: int - количество курсов
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/course/<id> [GET]
Возвращает данные об одном курсе с id = <id> с главами, темами и уроками. Если курс не найден, возвращает 404.
[
    data: Course - данные о курсе
    result: bool - успешно ли получены данные
]

/api/course/create [POST]
Создать курс.
Request: [
    title: string - название курса
    description: string - текст курса
    is_open: int - доступны ли все главы курса сразу
]
Response: [
    data: Course - данные о созданном курсе
    result: bool - успешно ли создан курс
]

/api/course/update [POST]
Редактировать курс.
Request: [
    title: string - название курса
    description: string - текст курса
    is_open: int - доступны ли все главы курса сразу
    status: int - статус курса
]
Response: [
    data: Course - данные об отредактированом курсе
    result: bool - успешно ли отредактирован курс
]

/api/course/delete [POST]
Удалить курс.
Request: [
    id: int - id курса
]
Response: [
    result: bool - успешно ли удален курс
]

/api/course/restore [POST]
Восстановить курс.
Request: [
    id: int - id курса
]
Response: [
    result: bool - успешно ли восстановлен курс
]



---------- [ Главы ] ----------

/api/chapter/<id> [GET]
Возвращает данные об одной главе с id = <id>. Если глава не найдена, возвращает 404.
[
    data: Chapter - данные о главе
    result: bool - успешно ли получены данные
]

/api/course/create-chapter [POST]
Создать главу.
Request: [
    title: string - название главы
    course_id: int - id курса
]
Response: [
    data: Chapter - данные о созданной главе
    result: bool - успешно ли создана глава
]

/api/course/update-chapter [POST]
Редактировать главу.
Request: [
    title: string - название главы
]
Response: [
    data: Chapter - данные об отредактированой главе
    result: bool - успешно ли отредактирована глава
]

/api/course/delete-chapter [POST]
Удалить главу.
Request: [
    id: int - id главы
]
Response: [
    result: bool - успешно ли удалена глава
]

/api/course/restore-chapter [POST]
Восстановить главу.
Request: [
    id: int - id главы
]
Response: [
    result: bool - успешно ли восстановлена глава
]



---------- [ Темы ] ----------

/api/theme/<id> [GET]
Возвращает данные об одной теме с id = <id>. Если тема не найдена, возвращает 404.
[
    data: Theme - данные о теме
    result: bool - успешно ли получены данные
]

/api/course/create-theme [POST]
Создать тему.
Request: [
    title: string - название темы
    chapter_id: int - id главы
]
Response: [
    data: Theme - данные о созданной теме
    result: bool - успешно ли создана тема
]

/api/course/update-theme [POST]
Редактировать тему.
Request: [
    title: string - название темы
]
Response: [
    data: Theme - данные об отредактированой теме
    result: bool - успешно ли отредактирована тема
]

/api/course/delete-theme [POST]
Удалить тему.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли удалена тема
]

/api/course/restore-theme [POST]
Восстановить тему.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли восстановлена тема
]



---------- [ Уроки ] ----------

/api/lesson/<id> [GET]
Возвращает данные об одном уроке с id = <id>. Если урок не найден, возвращает 404.
[
    data: Lesson - данные об уроке
    result: bool - успешно ли получены данные
]

/api/course/create-lesson [POST]
Создать урок.
Request: [
    title: string - название урока
    theme_id: int - id темы
    description: string - текст урока
]
Response: [
    data: Lesson - данные о созданном уроке
    result: bool - успешно ли создан урок
]

/api/course/update-lesson [POST]
Редактировать урок.
Request: [
    title: string - название урока
    theme_id: int - id темы
    description: string - текст урока
    status: int - статус урока
]
Response: [
    data: Theme - данные об отредактированом уроке
    result: bool - успешно ли отредактирован урок
]

/api/course/autosave-lesson [POST]
Автосохранить урок.
Request: [
    description: string - текст урока
]
Response: [
    result: bool - успешно ли автосохранен урок
]

/api/course/delete-lesson [POST]
Удалить урок.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли удалена тема
]

/api/course/restore-lesson [POST]
Восстановить урок.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли восстановлена тема
]