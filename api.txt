========== [ Модели ] ==========

User: - пользователь
[
    id: int - id
    name: string - имя и фамилия
    role: string - роль
    username: string - логин
    lastAction: string - дата последнего действия в системе
    isActive: int - активен ли пользователь
]

News: - новость
[
    id: int - id
    status: int - статус (0 - черновик, 1 - опубликована)
    title: string - заголовок
    text: string - текст
    date: string - дата публикации в формате yyyy-MM-DD HH:mm:ss
    user_id: int - id автора
    is_deleted: int - удалена ли новость
    <categories>: NewsCategory[] - список привязанных категорий
    <user>: [ - данные об авторе
        id: id автора
        name: имя автора
    ]
    <image>: Image - изображение новости
]

NewsCategory: - категория новости
[
    id: int - id
    title: string - название
    user_id: int - id автора
    is_deleted: int - удалена ли категория
]

Course: - курс
[
    id: int - id
    title: string - название
    description: string - описание
    is_open: int - все ли главы доступны сразу
    status: int - статус (0 - черновик, 1 - опубликована)
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удален ли курс
    <chapters>: Chapter - список глав
    <image>: Image - изображение курса
    <user>: User - создатель курса
    <percentage>: [ - прогресс обучения
        lessonsCount: int - количество уроков в курсе
        checkedLessonsCount: int - количество пройденных уроков в курсе
        percentage: int - процент пройденных уроков в курсе
    ]
]

Chapter: - глава
[
    id: int - id
    course_id: int - id курса
    title: string - название
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удалена ли глава
    <themes>: Theme - список тем
    <image>: Image - изображение главы
]

Theme: - тема
[
    id: int - id
    chapter_id: int - id главы
    title: string - название
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удалена ли тема
    <lessons>: Lesson - список уроков
]

Lesson: - урок
[
    id: int - id
    theme_id: int - id темы
    title: string - название
    description: string - описание
    description_autosave: string - автосохраненное описание
    status: int - статус (0 - черновик, 1 - опубликована)
    user_id : int - id автора
    date: string - дата создания в формате yyyy-MM-DD HH:mm:ss
    is_deleted: int - удален ли урок
    <test>: Test - прикрепленный тест
    <isChecked>: bool - пройден ли урок
]

Test: - тест в уроке
[
    id: int - id
    lesson_id: int - id урока
    is_active: int - активен ли тест
    user_id: int - id создателя теста
    date: string - дата добавления
    <testQuestions>: Question[] - вопросы теста
]

Question: - вопрос теста
[
    id: int - id
    test_id: int - id теста
    is_open: int - открытый ли вопрос (открытый не требует вариантов)
    text: string - текст вопроса
    answers: string - варианты ответов, json
    right_answer: string - правильный ответ
    user_id: int - id создателя теста
    date: string - дата добавления
    <userTestAnswer>: UserTestAnswer - ответ пользователя на вопрос
]

UserTestAnswer:
[
    test_question_id: int - id вопроса
    user_id: int - id отвечающего
    answer: string - ответ
    is_right: int - правильный ли ответ (0 - нет, 1 - да, 2 - пока не известно)
    date: string - дата ответа
]

Answer: - вариант ответа на тест
[
    text: string - текст вопроса
    rightText: string - комментарий при правильном ответе
    wrongText: string - комментарий при неправильном ответе
]

UploadedImage: - загружаемое изображение
[
    data: string - изображение в base64
    extension: string - разрешение изображения
]

Image: - изображение
[
    id: int - id
    server: string - сервер где хранится изображение
    directory: string - директория изображения
    name: string - имя файла изображения
    original_name: string - оригинальное название изображения
    user_id: int - Id пользователя, загрузившего изображение
    date: string - дата загрузки
    model_name: string - модель, для которой предназначается изображение
    model_pk: string - Id модели, для которой предназначается изображение
    type: string - тип изображения
    is_deleted: int - удалено ли изображение
]





========== [ URL'ы ] ==========

---------- [ Пользователь ] ----------

/api/whoami [GET]
Возвращает данные о текущем пользователе вместе с разрешениями.
Request: []
Response: [
    user: User - данные о текущем пользователе
    permissions: string[] - разрешения текущего пользователя
]



---------- [ Новости ] ----------

/api/news [GET]
Возвращает новости с категориями и постраничной разбивкой. Админы видят даже удаленные новости.
Request: [
    <page>: int - страница
    <category>: int - категория новостей
]
Response: [
    data: News[] - список новостей
    count: int - количество новостей
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/news/<id> [GET]
Возвращает данные об одной новости с id = <id>. Если новость не найдена, возвращает 404.
[
    data: News - данные о новости
    result: bool - успешно ли получены данные
]

/api/news/create [POST]
Создать новость.
Request: [
    title: string - заголовок новости
    text: string - текст новости
    <NewsCategory>: [[<title|id>: <string|int>]] - категории новостей. Для каждой категории надо указать либо title новой категории, либо id уже существующей.
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: News - данные о созданной новости
    result: bool - успешно ли создана новость
]

/api/news/update [POST]
Редактировать новость. Уже привязанные категории будут отвязаны, поэтому NewsCategory надо передавать при каждом запросе.
Request: [
    id: int - id новости
    <title>: string - заголовок новости
    <text>: string - текст новости
    <status>: int - статус новости
    <date>: string - дата публикации новости
    <NewsCategory>: [[<title|id>: <string|int>]] - категории новостей. Для каждой категории надо указать либо title новой категории, либо id уже существующей.
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: News - данные о созданной новости
    result: bool - успешно ли создана новость
]

/api/news/delete [POST]
Удалить новость.
Request: [
    id: int - id новости
]
Response: [
    result: bool - успешно ли удалена новость
]

/api/news/restore [POST]
Восстановить новость.
Request: [
    id: int - id новости
]
Response: [
    result: bool - успешно ли восстановлена новость
]



---------- [ Категории новостей ] ----------

/api/news-category [GET]
Получить список категорий новостей. Админы видят даже удаленные категории.
Request: [
    <page>: int - страница, обычно не важна: на страницу приходится 10000 категорий
]
Response: [
    data: NewsCategory[] - список категорий новостей
    count: int - количество категорий новостей
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/news-category/create [POST]
Создать категорию новостей.
Request: [
    title: string - название категории
]
Response: [
    data: NewsCategory - данные о созданной категории
    result: bool - успешно ли создана категория
]

/api/news-category/update [POST]
Редактировать категорию новостей.
Request: [
    id: int - id категории
    <title>: string - название категории
]
Response: [
    data: NewsCategory - данные о категории
    result: bool - успешно ли отредактирована категория
]

/api/news-category/delete [POST]
Удалить категорию новостей.
Request: [
    id: int - id категории
]
Response: [
    result: bool - успешно ли удалена категория
]

/api/news-category/restore [POST]
Восстановить категорию новостей.
Request: [
    id: int - id категории
]
Response: [
    result: bool - успешно ли восстановлена категория
]



---------- [ Курсы ] ----------

/api/course [GET]
Получить список курсов. Админы видят даже удаленные курсы.
Request: [
    <page>: int - страница
]
Response: [
    data: Course[] - список курсов
    count: int - количество курсов
    page: int - текущая страница
    pagesCount: int - количество страниц
    <prevPage>: string - ссылка на предыдущую страницу, если возможно
    <nextPage>: string - ссылка на следующую страницу, если возможно
]

/api/course/<id> [GET]
Возвращает данные об одном курсе с id = <id> с главами, темами и уроками. Если курс не найден, возвращает 404.
[
    data: Course - данные о курсе
    result: bool - успешно ли получены данные
]

/api/course/create [POST]
Создать курс.
Request: [
    title: string - название курса
    description: string - текст курса
    is_open: int - доступны ли все главы курса сразу
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: Course - данные о созданном курсе
    result: bool - успешно ли создан курс
]

/api/course/update [POST]
Редактировать курс.
Request: [
    id: int - id курса
    <title>: string - название курса
    <description>: string - текст курса
    <is_open>: int - доступны ли все главы курса сразу
    <status>: int - статус курса
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: Course - данные об отредактированом курсе
    result: bool - успешно ли отредактирован курс
]

/api/course/delete [POST]
Удалить курс.
Request: [
    id: int - id курса
]
Response: [
    result: bool - успешно ли удален курс
]

/api/course/restore [POST]
Восстановить курс.
Request: [
    id: int - id курса
]
Response: [
    result: bool - успешно ли восстановлен курс
]



---------- [ Главы ] ----------

/api/chapter/<id> [GET]
Возвращает данные об одной главе с id = <id>. Если глава не найдена, возвращает 404.
[
    data: Chapter - данные о главе
    result: bool - успешно ли получены данные
]

/api/course/create-chapter [POST]
Создать главу.
Request: [
    title: string - название главы
    course_id: int - id курса
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: Chapter - данные о созданной главе
    result: bool - успешно ли создана глава
]

/api/course/update-chapter [POST]
Редактировать главу.
Request: [
    id: int - id главы
    <title>: string - название главы
    <image>: UploadedImage - данные об изображении
]
Response: [
    data: Chapter - данные об отредактированой главе
    result: bool - успешно ли отредактирована глава
]

/api/course/delete-chapter [POST]
Удалить главу.
Request: [
    id: int - id главы
]
Response: [
    result: bool - успешно ли удалена глава
]

/api/course/restore-chapter [POST]
Восстановить главу.
Request: [
    id: int - id главы
]
Response: [
    result: bool - успешно ли восстановлена глава
]



---------- [ Темы ] ----------

/api/theme/<id> [GET]
Возвращает данные об одной теме с id = <id>. Если тема не найдена, возвращает 404.
[
    data: Theme - данные о теме
    result: bool - успешно ли получены данные
]

/api/course/create-theme [POST]
Создать тему.
Request: [
    title: string - название темы
    chapter_id: int - id главы
]
Response: [
    data: Theme - данные о созданной теме
    result: bool - успешно ли создана тема
]

/api/course/update-theme [POST]
Редактировать тему.
Request: [
    id: int - id темы
    <title>: string - название темы
]
Response: [
    data: Theme - данные об отредактированой теме
    result: bool - успешно ли отредактирована тема
]

/api/course/delete-theme [POST]
Удалить тему.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли удалена тема
]

/api/course/restore-theme [POST]
Восстановить тему.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли восстановлена тема
]



---------- [ Уроки ] ----------

/api/lesson/<id> [GET]
Возвращает данные об одном уроке с id = <id>. Если урок не найден, возвращает 404.
[
    data: Lesson - данные об уроке
    result: bool - успешно ли получены данные
]

/api/course/create-lesson [POST]
Создать урок.
Request: [
    title: string - название урока
    theme_id: int - id темы
    description: string - текст урока
]
Response: [
    data: Lesson - данные о созданном уроке
    result: bool - успешно ли создан урок
]

/api/course/update-lesson [POST]
Редактировать урок.
Request: [
    id: int - id урока
    <title>: string - название урока
    <description>: string - текст урока
    <status>: int - статус урока
]
Response: [
    data: Theme - данные об отредактированом уроке
    result: bool - успешно ли отредактирован урок
]

/api/course/autosave-lesson [POST]
Автосохранить урок.
Request: [
    description: string - текст урока
]
Response: [
    result: bool - успешно ли автосохранен урок
]

/api/course/delete-lesson [POST]
Удалить урок.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли удалена тема
]

/api/course/restore-lesson [POST]
Восстановить урок.
Request: [
    id: int - id темы
]
Response: [
    result: bool - успешно ли восстановлена тема
]



---------- [ Тесты ] ----------

/api/test/add-test [POST]
Добавить тест к уроку.
Request: [
    lesson_id: int - id урока
]
Response: [
    result: bool - успешно ли добавлен тест
    data: Test|array - либо данные о тесте, либо текст ошибок
]

/api/test/update-test [POST]
Редактировать тест.
Request: [
    id: int - id теста
    <is_active>: int - активен ли тест
]
Response: [
    result: bool - успешно ли добавлен тест
    data: Test - данные о тесте
]

/api/test/create-question [POST]
Добавить вопрос к тесту.
Request: [
    test_id: int - id теста
    text: string - текст вопроса
    answers: string|Answer[] - варианты ответов в формате json или в виде массива. Каждый вариант должен иметь вид модели Answer
    right_answer: string - правильный ответ
]
Response: [
    result: bool - успешно ли добавлен вопрос
    data: Question - данные о вопросе
]

/api/test/update-question [POST]
Редактировать вопрос теста.
Request: [
    id: int - id вопроса
    <text>: string - текст вопроса
    <answers>: string|Answer[] - варианты ответов в формате json или в виде массива. Каждый вариант должен иметь вид модели Answer
    <right_answer>: string - правильный ответ
]
Response: [
    result: bool - успешно ли отредактирован вопрос
    data: Question - данные о вопросе
]

/api/test/delete-question [POST]
Удалить вопрос теста.
Request: [
    id: int - id вопроса
]
Response: [
    result: bool - успешно ли удален вопрос
]

/api/test/check-lesson [POST]
Отметить урок пройденным.
Request: [
    id: int - id урока
]
Response: [
    result: bool - отмечен ли урок
]

/api/test/send-answer [POST]
Отправить ответ на вопрос теста.
Request: [
    question_id: int - id вопроса
    answer: string - ответ
]
Response: [
    result: bool - сохранен ли ответ
    message: string - сообщение при ошибке сохранения
    data: [
        isRight: int - правильный ли ответ (0 - нет, 1 - да, 2 - пока не известно)
        message: string - дополнительный комментарий
    ]
]